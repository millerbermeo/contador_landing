---
export interface Props {
  images: string[]
}
const { images } = Astro.props
---

<div class="carousel-container relative w-full max-w-7xl mx-auto overflow-hidden">
  <!-- Carrusel -->
  <div class="flex items-center">
    <!-- Botón anterior fuera del carrusel -->
    <button id="prev-btn" class="text-[45px] p-2 rounded-full mr-4">
      <ion-icon name="chevron-back-circle"></ion-icon>
    </button>

    <!-- Contenedor del carrusel -->
    <div class="carousel-track-wrapper flex-grow overflow-hidden">
      <div id="carousel-track" class="carousel-track flex gap-4 transition-transform duration-300 ease-out" style="transform: translateX(0);">
        {images.map((image, index) => (
          <div class="carousel-item w-1/3 flex-shrink-0 flex items-center justify-center h-64 bg-gray-300 rounded-lg overflow-hidden">
            <img src={image} alt={`Slide ${index + 1}`} class="object-cover h-full w-full" />
          </div>
        ))}
      </div>
    </div>

    <!-- Botón siguiente fuera del carrusel -->
    <button id="next-btn" class="text-[45px] p-2 rounded-full ml-4">
      <ion-icon name="chevron-forward-circle"></ion-icon>
    </button>
  </div>

  <!-- Indicadores -->
  <div class="indicators absolute bottom-4 left-0 right-0 flex justify-center space-x-2">
    {Array.from({ length: Math.ceil(images.length / 3) }).map((_, index) => (
      <button data-index={index} class="indicator w-2 h-2 rounded-full bg-gray-400"></button>
    ))}
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const track = document.getElementById("carousel-track");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");
    const indicators = document.querySelectorAll(".indicator");

    let currentIndex = 0;
    const itemsPerSlide = 3; // Mostrar 3 imágenes al mismo tiempo
    const totalSlides = Math.ceil(track.children.length / itemsPerSlide);

    const updateCarousel = () => {
      track.style.transform = `translateX(-${currentIndex * (100 / itemsPerSlide)}%)`;
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle("bg-gray-800", index === currentIndex);
      });
    };

    prevBtn.addEventListener("click", () => {
      currentIndex = (currentIndex > 0) ? currentIndex - 1 : totalSlides - 1;
      updateCarousel();
    });

    nextBtn.addEventListener("click", () => {
      currentIndex = (currentIndex < totalSlides - 1) ? currentIndex + 1 : 0;
      updateCarousel();
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener("click", () => {
        currentIndex = index;
        updateCarousel();
      });
    });

    updateCarousel();
  });
</script>
